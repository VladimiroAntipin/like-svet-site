'use client';

import { useEffect, useState, useRef } from "react";
import { useRouter } from "next/navigation";
import axios from "axios";
import { toast } from "sonner";
import { useAuth } from "@/context/auth-context";
import useCart from "@/hooks/use-cart";
import { purchaseGiftCode } from "@/actions/purchase-code";

/* eslint-disable @typescript-eslint/no-explicit-any */
const PaymentSuccessPage = ({ onOrderComplete }: { onOrderComplete?: () => void }) => {
    const router = useRouter();
    const { loading, user } = useAuth();
    const [isSubmitting, setIsSubmitting] = useState(false);
    const removeAll = useCart((state) => state.removeAll);
    const hasProcessedRef = useRef(false);

    useEffect(() => {
        const confirmPayment = async () => {
            if (hasProcessedRef.current) return;
            hasProcessedRef.current = true;

            if (!user || !user.token) {
                toast.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
                router.push("/auth");
                return;
            }

            const urlParams = new URLSearchParams(window.location.search);
            const orderId = urlParams.get("orderId");

            if (!orderId) {
                toast.error("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞");
                router.push("/");
                return;
            }

            setIsSubmitting(true);

            try {
                // Aggiorna l'ordine come pagato
                await axios.patch(
                    `${process.env.NEXT_PUBLIC_API_URL}/orders/${orderId}`,
                    { isPaid: true },
                    { headers: { Authorization: `Bearer ${user.token}` } }
                );

                toast.success("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω!");
                removeAll();

                // Recupera ordine completo con orderItems
                const orderRes = await axios.get(
                    `${process.env.NEXT_PUBLIC_API_URL}/orders/${orderId}`,
                    { headers: { Authorization: `Bearer ${user.token}` } }
                );

                // Filtra solo prodotti gift card
                const giftCardItems = orderRes.data.orderItems?.filter(
                    (item: any) => item.giftCardAmount && item.giftCardAmount > 0
                ) || [];

                if (giftCardItems.length > 0) {
                    await Promise.all(
                        giftCardItems.map(async (item: any) => {
                            const amount = (item.giftCardAmount || 0) * 100;
                            try {
                                await purchaseGiftCode(amount, item.id, user.token);
                            } catch {
                                toast.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–∞—Ä–æ—á–Ω–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞");
                            }
                        })
                    );
                    toast.success("üéÅ –ü–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞–Ω!");
                }

                if (onOrderComplete) onOrderComplete();
            } catch {
                toast.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã.");
                router.push("/");
            } finally {
                setIsSubmitting(false);
            }
        };

        if (!loading) confirmPayment();
    }, [user, loading, router, removeAll, onOrderComplete]);

    // Loader con spinner
    if (loading || isSubmitting) {
        return (
            <div className="flex items-center justify-center min-h-screen bg-gray-100">
                <div className="flex flex-col items-center gap-4">
                    <div className="w-12 h-12 border-4 border-gray-300 border-t-black rounded-full animate-spin"></div>
                    <p className="text-gray-500 text-lg">–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞...</p>
                </div>
            </div>
        );
    }

    return (
        <div className="flex items-center justify-center min-h-screen bg-gray-100">
            <div className="bg-white rounded-2xl shadow-xl p-10 w-[90%] max-w-md text-center flex flex-col items-center justify-center gap-6 h-[460px]">
                <div className="text-7xl text-green-500">üéâ</div>
                <h1 className="text-3xl font-bold text-gray-900">–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ</h1>
                <p className="text-gray-600 text-lg">
                    –í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω.<br />
                    –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!
                </p>
                <p className="text-gray-500 text-sm mt-2">
                    –í—Å–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –∏ –≤–∞—à–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤ <strong>–º–æ–π –ø—Ä–æ—Ñ–∏–ª—å ‚Üí –º–æ–π –∑–∞–∫–∞–∑—ã</strong>.
                </p>
                <button
                    onClick={() => router.push("/")}
                    className="mt-4 px-6 py-3 bg-black text-white font-semibold rounded-lg shadow-md hover:bg-gray-900 transition-all duration-200"
                    disabled={isSubmitting}
                >
                    –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
                </button>
            </div>
        </div>
    );
};

export default PaymentSuccessPage;